import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.python.keras.models import Sequential, Model
from tensorflow.python.keras.layers import Dense, Input,LSTM, Conv2D, Flatten, Dropout, MaxPooling2D
from sklearn.metrics import mean_absolute_error
from tensorflow.python.keras.callbacks import EarlyStopping

#1. 데이터 
path = './_data/kaggle_jena/'
path_save = './_save/kaggle_jena/'

dataset = pd.read_csv(path + 'jena_climate_2009_2016.csv', index_col = 0)
print(dataset)  #[420551 rows x 14 columns]
#[420551 rows x 15 columns] # [date Time] : 데이터x => index임  
#성능향상원할 시 date Time에서 년,월, 일, 시간대로 컬럼 빼낼 수는 있음 
#10분단위인 데이터를 몇개씩 자를지 선택! 


#1-1 데이터 확인 및 결측치 제거 
print(dataset.columns)
print(dataset.info()) #결측치 없음 
print(dataset.describe()) # T(temperature)를 y값으로

print(dataset['T (degC)'].values)  #pandas데이터 형식으로 출력됨  -> numpy로 바꿔줌 
 
# import matplotlib.pyplot as plt   
# plt.plot(dataset['T (degC)'].values)    #numpy데이터 형식으로 바꿔줘야함 
# plt.show()

#1-2 데이터 분리
x = dataset.drop(['T (degC)'], axis=1)
print(x)
y = dataset['T (degC)']
print(y)


ts=20

x_train,x_test,y_train,y_test=train_test_split(x,y,train_size=0.7,shuffle=False)
x_test,x_predict,y_test,y_predict=train_test_split(x_test,y_test,train_size=2/3,shuffle=False)

print(x_train.shape,y_train.shape)
print(x_test.shape,y_test.shape)
print(x_predict.shape,y_predict.shape)

def time_splitx(x,ts,scaler):
    x=scaler.transform(x)
    gen=(x[i:i+ts] for i in range(len(x)-ts+1))
    return np.array(list(gen))[:,:-1]

def time_splity(y,ts):
    gen=(y[i:i+ts] for i in range(len(y)-ts+1))
    return np.array(list(gen))[:,-1]

from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.preprocessing import MaxAbsScaler, RobustScaler
scaler=MinMaxScaler()
scaler.fit(x_train)

x_train=time_splitx(x_train,ts,scaler)
x_test=time_splitx(x_test,ts,scaler)
x_predict=time_splitx(x_predict,ts,scaler)

y_train=time_splity(y_train,ts)
y_test=time_splity(y_test,ts)
y_predict=time_splity(y_predict,ts)

print(x_train.shape,y_train.shape)
print(x_test.shape,y_test.shape)
print(x_predict.shape,y_predict.shape)